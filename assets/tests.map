{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","jarvis/tests/helpers/ember-power-select.js","jarvis/tests/integration/components/ast-maker-test.js","jarvis/tests/lint/app.lint-test.js","jarvis/tests/lint/templates.template.lint-test.js","jarvis/tests/lint/tests.lint-test.js","jarvis/tests/test-helper.js","jarvis/tests/unit/controllers/application-test.js","jarvis/tests/unit/controllers/gists-test.js","jarvis/tests/unit/controllers/index-test.js","jarvis/tests/unit/routes/gists-test.js","jarvis/tests/unit/routes/index-test.js","jarvis/tests/unit/services/codemod-test.js","jarvis/tests/unit/utils/compile-module-test.js","jarvis/tests/unit/utils/op-query-test.js","jarvis/tests/unit/utils/smart-op-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"jarvis/tests/helpers/ember-power-select\", [\"exports\", \"ember-power-select/test-support/helpers\"], function (_exports, _helpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = deprecatedRegisterHelpers;\n  _exports.selectChoose = _exports.touchTrigger = _exports.nativeTouch = _exports.clickTrigger = _exports.typeInSearch = _exports.triggerKeydown = _exports.nativeMouseUp = _exports.nativeMouseDown = _exports.findContains = void 0;\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate(\"DEPRECATED `import { \".concat(name, \" } from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import { \").concat(name, \" } from 'ember-power-select/test-support/helpers';`\"), false, {\n        until: '1.11.0',\n        id: \"ember-power-select-test-support-\".concat(name)\n      }));\n      return fn.apply(void 0, arguments);\n    };\n  }\n\n  var findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  _exports.findContains = findContains;\n  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  _exports.nativeMouseDown = nativeMouseDown;\n  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  _exports.nativeMouseUp = nativeMouseUp;\n  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  _exports.triggerKeydown = triggerKeydown;\n  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  _exports.typeInSearch = typeInSearch;\n  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  _exports.clickTrigger = clickTrigger;\n  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  _exports.nativeTouch = nativeTouch;\n  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  _exports.touchTrigger = touchTrigger;\n  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n  _exports.selectChoose = selectChoose;\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, {\n      until: '1.11.0',\n      id: 'ember-power-select-test-support-register-helpers'\n    }));\n    return (0, _helpers.default)();\n  }\n});","define(\"jarvis/tests/integration/components/ast-maker-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)(\"Integration | Component | ast-maker\", function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"it renders\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <AstMaker \n                  @mode=\"javascript\"\n                  @code=\"foo();\"\n                  @dest=\"foo.bar()\"\n                  @nodeOp=\"replace\"\n                  @parser=\"recast\">\n                </AstMaker>\n                    \n                */\n                {\n                  id: \"smHyLIV8\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"ast-maker\\\",[],[[\\\"@mode\\\",\\\"@code\\\",\\\"@dest\\\",\\\"@nodeOp\\\",\\\"@parser\\\"],[\\\"javascript\\\",\\\"foo();\\\",\\\"foo.bar()\\\",\\\"replace\\\",\\\"recast\\\"]],{\\\"statements\\\":[[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n                  meta: {}\n                }));\n\n              case 2:\n                // TODO: replace with better assertions\n                // Currently finding the number of .CodeMirror instances\n                assert.equal((0, _testHelpers.findAll)(\".CodeMirror\").length, 4);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"jarvis/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/ast-maker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ast-maker.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('constants/parsers.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/parsers.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/gists.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/gists.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/gists.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/gists.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/codemod.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/codemod.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('utils/compile-module.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/compile-module.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('utils/op-query.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/op-query.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('utils/smart-op.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/smart-op.js should pass ESLint\\n\\n');\n  });\n});","define(\"jarvis/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('jarvis/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'jarvis/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('jarvis/templates/components/ast-maker.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'jarvis/templates/components/ast-maker.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('jarvis/templates/gists.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'jarvis/templates/gists.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('jarvis/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'jarvis/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"jarvis/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('integration/components/ast-maker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ast-maker-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/gists-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/gists-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/gists-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/gists-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/services/codemod-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/codemod-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/utils/compile-module-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/compile-module-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/utils/op-query-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/op-query-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/utils/smart-op-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/smart-op-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"jarvis/tests/test-helper\", [\"jarvis/app\", \"jarvis/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"jarvis/tests/unit/controllers/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:application');\n      assert.ok(controller);\n    });\n  });\n});","define(\"jarvis/tests/unit/controllers/gists-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | gists', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:gists');\n      assert.ok(controller);\n    });\n  });\n});","define(\"jarvis/tests/unit/controllers/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:index');\n      assert.ok(controller);\n    });\n  });\n});","define(\"jarvis/tests/unit/routes/gists-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | gists', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:gists');\n      assert.ok(route);\n    });\n  });\n});","define(\"jarvis/tests/unit/routes/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define(\"jarvis/tests/unit/services/codemod-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | codemod', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var service = this.owner.lookup('service:codemod');\n      assert.ok(service);\n    });\n  });\n});","define(\"jarvis/tests/unit/utils/compile-module-test\", [\"jarvis/utils/compile-module\", \"qunit\"], function (_compileModule, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Utility | compile-module', function () {\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', function (assert) {\n      var result = (0, _compileModule.default)();\n      assert.ok(result);\n    });\n  });\n});","define(\"jarvis/tests/unit/utils/op-query-test\", [\"jarvis/utils/op-query\", \"qunit\"], function (_opQuery, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Unit | Utility | op-query\", function () {\n    (0, _qunit.test)(\"it works\", function (assert) {\n      var result = (0, _opQuery.default)(\"javascript\", \"remove\");\n      assert.equal(result, \".remove();\");\n    });\n  });\n});","define(\"jarvis/tests/unit/utils/smart-op-test\", [\"jarvis/utils/smart-op\", \"qunit\"], function (_smartOp, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Unit | Utility | smartOp\", function () {\n    // Replace this with your real tests.\n    (0, _qunit.test)(\"it works\", function (assert) {\n      var result = (0, _smartOp.default)(\"foo();\", \"foo.bar();\");\n      assert.ok(result);\n    });\n  });\n});","define('jarvis/config/environment', [], function() {\n  var prefix = 'jarvis';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('jarvis/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}